# bot.py
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("Env var BOT_TOKEN is not set")

def norm(url: str) -> str:
    return url if url.endswith("/") else url + "/"

BASE = norm(os.getenv("PANEL_URL") or os.getenv("RENDER_EXTERNAL_URL") or "http://localhost:8000/")
WEBAPP_URL = BASE + "twa"   # <<< –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—É—Ç—å

KEYS_FILE = "keys.txt"

# ---- storage helpers ----
def load_keys():
    try:
        with open(KEYS_FILE, "r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        return []

def save_keys(keys):
    with open(KEYS_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(keys) + ("\n" if keys else ""))

def pop_keys(n: int):
    keys = load_keys()
    take = min(n, len(keys))
    out = keys[:take]
    rest = keys[take:]
    save_keys(rest)
    return out, len(keys)

# ---- bot ----
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'panel'])
async def start(message: types.Message):
    await send_webapp_button(message)

async def send_webapp_button(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    kb.add(types.KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", web_app=types.WebAppInfo(url=WEBAPP_URL)))
    try:
        await message.answer("\u200E", reply_markup=kb)  # –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    except Exception:
        await message.answer(".", reply_markup=kb)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: !k1/k2/k3
@dp.message_handler(lambda m: m.text and m.text.startswith("!"))
async def add_keys(message: types.Message):
    raw = message.text[1:]
    parts = [p.strip() for p in raw.replace("\n", "/").split("/") if p.strip()]
    if not parts:
        return await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π.")
    existing = load_keys()
    added = 0
    for key in parts:
        if key not in existing:
            existing.append(key)
            added += 1
    save_keys(existing)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}. –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {len(existing)}.")

# –í—ã–¥–∞—á–∞ –ø–æ —á–∏—Å–ª—É N
@dp.message_handler(lambda m: m.text and m.text.isdigit())
async def give_keys(message: types.Message):
    n = int(message.text)
    if n <= 0:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    taken, total_before = pop_keys(n)
    if not taken:
        return await message.answer("üòï –ö–ª—é—á–µ–π –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
    total_after = total_before - len(taken)
    text = "–í–∞—à–∏ –∫–ª—é—á–∏:\n" + "\n".join(taken) + f"\n\n–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: {total_after}"
    await message.answer(text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞
@dp.message_handler(commands=['stock'])
async def stock(message: types.Message):
    keys = load_keys()
    total = len(keys)
    if total == 0:
        return await message.answer("üì¶ –°–∫–ª–∞–¥ –ø—É—Å—Ç.")
    preview = "\n".join(keys[:10])
    more = f"\n...–∏ –µ—â—ë {total-10}" if total > 10 else ""
    await message.answer(f"üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ {total} –∫–ª—é—á–µ–π.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n{preview}{more}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
