import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –í–°–¢–ê–í–¨ –°–Æ–î–ê –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
# –ù–∞ Render: –¥–æ–±–∞–≤—å BOT_TOKEN –≤ Environment Variables
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

KEYS_FILE = "keys.txt"

def load_keys():
    if not os.path.exists(KEYS_FILE):
        return []
    with open(KEYS_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def save_keys(keys):
    with open(KEYS_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(keys))

@dp.message_handler()
async def send_keys(message: types.Message):
    try:
        amount = int(message.text.strip())
    except ValueError:
        return  # –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    keys = load_keys()

    if not keys:
        await message.answer("‚ùå –ö–ª—é—á–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç!")
        return

    to_give = keys[:amount]   # –≤—ã–¥–∞—ë–º N –∫–ª—é—á–µ–π
    keys = keys[amount:]      # —É–¥–∞–ª—è–µ–º –∏—Ö —Å–æ —Å–∫–ª–∞–¥–∞
    save_keys(keys)

    await message.answer("\n".join(to_give))
    await message.answer(f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ: {len(keys)}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
