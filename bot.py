# bot.py
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("Env var BOT_TOKEN is not set")

BASE_WEBAPP_URL = os.getenv("PANEL_URL") or os.getenv("RENDER_EXTERNAL_URL") or "http://localhost:8000/"
ADMIN_ID = 1932862650
WEBAPP_URL = f"{BASE_WEBAPP_URL}?uid={ADMIN_ID}"

# –§–∞–π–ª —Å–∫–ª–∞–¥–∞
KEYS_FILE = "keys.txt"

# ===== helpers =====
def load_keys():
    try:
        with open(KEYS_FILE, "r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        return []

def save_keys(keys):
    with open(KEYS_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(keys) + ("\n" if keys else ""))

def pop_keys(n):
    keys = load_keys()
    take = min(n, len(keys))
    out = keys[:take]
    rest = keys[take:]
    save_keys(rest)
    return out, len(keys)

# ===== bot =====
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –ü–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await send_webapp_button(message)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏).")

@dp.message_handler(commands=['panel'])
async def open_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏")
    await send_webapp_button(message)

async def send_webapp_button(message: types.Message):
    """
    –î–µ–ª–∞–µ–º —É—Å—Ç–æ–π—á–∏–≤—É—é web_app –∫–Ω–æ–ø–∫—É, –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ:
    - ReplyKeyboard —Å web_app
    - is_persistent=True, one_time_keyboard=False
    - –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –∏—Å—á–µ–∑–∞–ª–∞.
    """
    kb = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=False,
        selective=False,
        is_persistent=True
    )
    kb.add(types.KeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å",
        web_app=types.WebAppInfo(url=WEBAPP_URL)
    ))

    # –ù—É–∂–µ–Ω –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π LRM; –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø—Ä–∏–º–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º "."
    INVISIBLE = "\u200E"  # LRM
    try:
        await message.answer(INVISIBLE, reply_markup=kb)
    except Exception:
        await message.answer(".", reply_markup=kb)

# --- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω): !k1/k2/k3 –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ---
@dp.message_handler(lambda m: bool(m.text) and m.text.startswith("!"))
async def add_keys(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    raw = message.text[1:]
    parts = [p.strip() for p in raw.replace("\n", "/").split("/") if p.strip()]
    if not parts:
        return await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    existing = load_keys()
    added = 0
    for key in parts:
        if key not in existing:
            existing.append(key)
            added += 1
    save_keys(existing)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}. –í—Å–µ–≥–æ –≤ —Å–∫–ª–∞–¥–µ: {len(existing)}.")

# --- –í—ã–¥–∞—á–∞ –∫–ª—é—á–µ–π –ø–æ —á–∏—Å–ª—É N (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ---
@dp.message_handler(lambda m: bool(m.text) and m.text.isdigit())
async def give_keys(message: types.Message):
    n = int(message.text)
    if n <= 0:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    taken, total_before = pop_keys(n)
    if not taken:
        return await message.answer("üòï –ö–ª—é—á–µ–π –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
    text = "–í–∞—à–∏ –∫–ª—é—á–∏:\n" + "\n".join(taken)
    total_after = total_before - len(taken)
    await message.answer(f"{text}\n\n–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: {total_after}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
